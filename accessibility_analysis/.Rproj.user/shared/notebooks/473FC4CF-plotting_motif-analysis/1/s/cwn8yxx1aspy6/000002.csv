"0","#Tim's function"
"0","motifDotplot <- function(listOfTables, show, qThreshold, title){"
"0","  mainReferenceDBtemp <- rbindlist(listOfTables, idcol=""ID"")"
"0","  # Change to factor to maintain order in plotting"
"0","  mainReferenceDBtemp$ID <- factor(mainReferenceDBtemp$ID, levels = unique(mainReferenceDBtemp$ID))"
"0","  # convert percentages and calculate fold change"
"0","  mainReferenceDB <- mainReferenceDBtemp %>%"
"0","    mutate(percentBackgroundNum = (as.numeric(gsub(""%"", """", percentBackground, fixed = TRUE))/100)) %>%"
"0","    mutate(percentFold = (percentTargetNum/percentBackgroundNum))"
"0","  # Convert the TF names to somthing more manageable"
"0","  mainReferenceDB <- mainReferenceDB %>%"
"0","  # ^ Now have: master table with IDs and needed values"
"0","  # Next: Find out which rows to pull for graphing: "
"0","  # Take first X amount of lines from tables"
"0","  loShortTables <- lapply(listOfTables, '[', c(1:show),)"
"0","  # Find the list of Motifs to extract"
"0","  shortTableDF <- rbindlist(loShortTables)"
"0","  voMotifsToExtract <- unique(shortTableDF$Consensus)"
"0","  tableToPlotAll <- mainReferenceDB[mainReferenceDB$Consensus %in% voMotifsToExtract,]"
"0","  tableToPlot <- tableToPlotAll[tableToPlotAll$q <= qThreshold,]"
"0","  # This command reorders Y-axis motifs nicely"
"0","  tableToPlot$Motif <- factor(tableToPlot$Motif,levels=rev(unique(tableToPlot$Motif)))"
"0","  # Find the maximum P value to scale the color with"
"0","  maxPValue <- max(abs(as.numeric(tableToPlot$logp)))"
"0","  minPValue <- min(abs(as.numeric(tableToPlot$logp)))"
"0","  tableToPlot$max <- maxPValue"
"0","  tableToPlot$median <- medianPValue"
"0","  ttp<<-tableToPlot"
"0","  # Plot with GGPlot"
"0","  dotplotMotifs <- ggplot(tableToPlot, aes(x=ID, y=Motif)) + "
"0","    geom_point(aes(size = percentFold, color = abs(as.numeric(logp)))) + "
"0","    ggtitle(title) +"
"0","    theme_bw(base_size = 14, base_family = ""Arial"")"
"0","}"
